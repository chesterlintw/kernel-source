From: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date: Wed, 17 Oct 2018 22:34:34 +0300
Subject: net: ipmr: fix unresolved entry dumps
Git-commit: eddf016b910486d2123675a6b5fd7d64f77cdca8
Patch-mainline: v4.19
References: networking-stable-18_11_02

If the skb space ends in an unresolved entry while dumping we'll miss
some unresolved entries. The reason is due to zeroing the entry counter
between dumping resolved and unresolved mfc entries. We should just
keep counting until the whole table is dumped and zero when we move to
the next as we have a separate table counter.

[js] no mr_rtm_dumproute yet, we have ipmr_rtm_dumproute and
     ip6mr_rtm_dumproute

Reported-by: Colin Ian King <colin.king@canonical.com>
Fixes: 8fb472c09b9d ("ipmr: improve hash scalability")
Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 net/ipv4/ipmr.c  |    2 --
 net/ipv6/ip6mr.c |    1 -
 2 files changed, 3 deletions(-)

--- a/net/ipv4/ipmr.c
+++ b/net/ipv4/ipmr.c
@@ -2373,8 +2373,6 @@ static int ipmr_rtm_dumproute(struct sk_
 next_entry:
 			e++;
 		}
-		e = 0;
-		s_e = 0;
 
 		spin_lock_bh(&mfc_unres_lock);
 		list_for_each_entry(mfc, &mrt->mfc_unres_queue, list) {
--- a/net/ipv6/ip6mr.c
+++ b/net/ipv6/ip6mr.c
@@ -2491,7 +2491,6 @@ static int ip6mr_rtm_dumproute(struct sk
 next_entry:
 				e++;
 			}
-			e = s_e = 0;
 		}
 		spin_lock_bh(&mfc_unres_lock);
 		list_for_each_entry(mfc, &mrt->mfc6_unres_queue, list) {
