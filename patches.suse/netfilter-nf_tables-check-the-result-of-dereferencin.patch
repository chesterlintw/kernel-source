From: Li RongQing <lirongqing@baidu.com>
Date: Tue, 26 Feb 2019 17:13:56 +0800
Subject: netfilter: nf_tables: check the result of dereferencing
 base_chain->stats
Git-commit: a9f5e78c403d2d62ade4f4c85040efc85f4049b8
Patch-mainline: 5.1-rc1
References: git-fixes

Check the result of dereferencing base_chain->stats, instead of result
of this_cpu_ptr with NULL.

base_chain->stats maybe be changed to NULL when a chain is updated and a
new NULL counter can be attached.

And we do not need to check returning of this_cpu_ptr since
base_chain->stats is from percpu allocator if it is non-NULL,
this_cpu_ptr returns a valid value.

And fix two sparse error by replacing rcu_access_pointer and
rcu_dereference with READ_ONCE under rcu_read_lock.

Thanks for Eric's help to finish this patch.

Fixes: 009240940e84c1 ("netfilter: nf_tables: don't assume chain stats are set when jumplabel is set")
Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
Signed-off-by: Zhang Yu <zhangyu31@baidu.com>
Signed-off-by: Li RongQing <lirongqing@baidu.com>
Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 net/netfilter/nf_tables_core.c |   10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

--- a/net/netfilter/nf_tables_core.c
+++ b/net/netfilter/nf_tables_core.c
@@ -126,6 +126,7 @@ nft_do_chain(struct nft_pktinfo *pkt, vo
 	const struct nft_chain *chain = priv, *basechain = chain;
 	struct nft_base_chain *base_chain;
 	const struct net *net = nft_net(pkt);
+	struct nft_stats __percpu *pstats;
 	const struct nft_rule *rule;
 	const struct nft_expr *expr, *last;
 	struct nft_regs regs;
@@ -223,19 +224,18 @@ next_rule:
 			 NFT_TRACETYPE_POLICY);
 
 	base_chain = nft_base_chain(basechain);
-	if (!base_chain->stats)
-		goto end;
 
 	rcu_read_lock_bh();
-	stats = this_cpu_ptr(rcu_dereference(base_chain->stats));
-	if (stats) {
+	pstats = READ_ONCE(base_chain->stats);
+	if (pstats) {
+		stats = this_cpu_ptr(pstats);
 		u64_stats_update_begin(&stats->syncp);
 		stats->pkts++;
 		stats->bytes += pkt->skb->len;
 		u64_stats_update_end(&stats->syncp);
 	}
 	rcu_read_unlock_bh();
-end:
+
 	return nft_base_chain(basechain)->policy;
 }
 EXPORT_SYMBOL_GPL(nft_do_chain);
