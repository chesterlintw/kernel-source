From: Olaf Hering <ohering@suse.de>
Patch-mainline: never, preserve kABI
Subject: Drivers: hv: vmbus: preserve hv_ringbuffer_get_debuginfo kABI
References: bsc#1126389, bsc#1126579

Restore kABI after applying ba50bf1ce9a51fc97db58b96d01306aa70bc3979.

--- a/drivers/hv/hyperv_vmbus.h
+++ b/drivers/hv/hyperv_vmbus.h
@@ -33,6 +33,7 @@
 
 #include "hv_trace.h"
 
+extern int suse_hv_ringbuffer_get_debuginfo(const struct hv_ring_buffer_info *ring_info, struct hv_ring_buffer_debug_info *debug_info);
 /*
  * Timeout for services such as KVP and fcopy.
  */
--- a/drivers/hv/ring_buffer.c
+++ b/drivers/hv/ring_buffer.c
@@ -164,7 +164,7 @@ hv_get_ringbuffer_availbytes(const struc
 }
 
 /* Get various debug metrics for the specified ring buffer. */
-int hv_ringbuffer_get_debuginfo(const struct hv_ring_buffer_info *ring_info,
+int suse_hv_ringbuffer_get_debuginfo(const struct hv_ring_buffer_info *ring_info,
 				struct hv_ring_buffer_debug_info *debug_info)
 {
 	u32 bytes_avail_towrite;
@@ -184,6 +184,11 @@ int hv_ringbuffer_get_debuginfo(const st
 		= ring_info->ring_buffer->interrupt_mask;
 	return 0;
 }
+void hv_ringbuffer_get_debuginfo(const struct hv_ring_buffer_info *ring_info,
+				struct hv_ring_buffer_debug_info *debug_info)
+{
+	suse_hv_ringbuffer_get_debuginfo(ring_info, debug_info);
+}
 EXPORT_SYMBOL_GPL(hv_ringbuffer_get_debuginfo);
 
 /* Initialize the ring buffer. */
--- a/include/linux/hyperv.h
+++ b/include/linux/hyperv.h
@@ -1110,7 +1110,7 @@ struct hv_ring_buffer_debug_info {
 };
 
 
-int hv_ringbuffer_get_debuginfo(const struct hv_ring_buffer_info *ring_info,
+void hv_ringbuffer_get_debuginfo(const struct hv_ring_buffer_info *ring_info,
 				struct hv_ring_buffer_debug_info *debug_info);
 
 /* Vmbus interface */
--- a/drivers/hv/vmbus_drv.c
+++ b/drivers/hv/vmbus_drv.c
@@ -47,6 +47,7 @@
 #include <linux/random.h>
 #include "hyperv_vmbus.h"
 
+#define hv_ringbuffer_get_debuginfo suse_hv_ringbuffer_get_debuginfo
 struct vmbus_dynid {
 	struct list_head node;
 	struct hv_vmbus_device_id id;
